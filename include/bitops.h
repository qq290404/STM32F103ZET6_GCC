#ifndef BIT_OPS_H
#define BIT_OPS_H

#define _B0_    (1 <<  0)
#define _B1_    (1 <<  1)
#define _B2_    (1 <<  2)
#define _B3_    (1 <<  3)
#define _B4_    (1 <<  4)
#define _B5_    (1 <<  5)
#define _B6_    (1 <<  6)
#define _B7_    (1 <<  7)
#define _B8_    (1 <<  8)
#define _B9_    (1 <<  9)
#define _B10_   (1 << 10)
#define _B11_   (1 << 11)
#define _B12_   (1 << 12)
#define _B13_   (1 << 13)
#define _B14_   (1 << 14)
#define _B15_   (1 << 15)
#define _B16_   (1 << 16)
#define _B17_   (1 << 17)
#define _B18_   (1 << 18)
#define _B19_   (1 << 19)
#define _B20_   (1 << 20)
#define _B21_   (1 << 21)
#define _B22_   (1 << 22)
#define _B23_   (1 << 23)
#define _B24_   (1 << 24)
#define _B25_   (1 << 25)
#define _B26_   (1 << 26)
#define _B27_   (1 << 27)
#define _B28_   (1 << 28)
#define _B29_   (1 << 29)
#define _B30_   (1 << 30)
#define _B31_   (1 << 31)

#define __BIT__(bit)						((uint32_t)(0x00000001 << (bit)))
#define __BIT_OR__(source, data)			(source) |= (data)
#define __BIT_XOR__(source, data)			(source) ^= (data)
#define __BIT_AND__(source, data)			(source) &= (data)
#define __BIT_SET__(source, data)			(source) = (data)
#define __BIT_RESET__(source, data) 		(source) &= ~(data)
#define __BIT_LEFT_SHIFT__(source, data)	((source) << (data))
#define __BIT_RIGHT_SHIFT__(source, data)	((source) >> (data))
#define __BIT_COVER_SET__(source, clean, data) (source) = ((source) & ~(clean)) | (data)

#define ALIGNMENT_2N 	(   2)
#define ALIGNMENT_4N 	(   4)
#define ALIGNMENT_8N 	(   8)
#define ALIGNMENT_16N 	(  16)
#define ALIGNMENT_32N 	(  32)
#define ALIGNMENT_64N 	(  64)
#define ALIGNMENT_128N 	( 128)
#define ALIGNMENT_1024N (1024)
#define ALIGNMENT_2048N (2048)
#define ALIGNMENT_4096N (4096)

#define ALIGNED(x, n) (((unsigned int) x) & (~(n - 1)))
#define EXTENDED_ALIGNED(x, n) ((((unsigned int) x) + ((n) - 1)) & (~(n - 1)))

#endif // BIT_OPS_H
